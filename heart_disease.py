# -*- coding: utf-8 -*-
"""heart disease

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m2RQewdxLO0ka17BFo1WV0uWLfroczu2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

ps2 = pd.read_csv('/content/final.csv')

print(ps2)

X = ps2.iloc[:, :-1]
y = ps2.iloc[:, -1]

With_heart_disease = ps2.loc[y == 1]
Without_heart_disease = ps2.loc[y == 0]

plt.scatter(With_heart_disease.iloc[:, 0], With_heart_disease.iloc[:, 1], s=10, label='Without heart disease')
plt.scatter(Without_heart_disease.iloc[:, 0], Without_heart_disease.iloc[:, 1], s=10, label='Without heart disease')
plt.legend()
plt.show()

print(X)
print(y)

#a = pd.get_dummies(ps2['cp'], prefix = "cp")
#b = pd.get_dummies(ps2['thal'], prefix = "thal")
#c = pd.get_dummies(ps2['slope'], prefix = "slope")

#frames = [ps2, a, b, c]
#ps2 = pd.concat(frames, axis = 1)
#ps2.head()

#ps2 = ps2.drop(columns = ['cp', 'thal', 'slope'])
#ps2.head()

print(X.shape, y.shape)

print(ps2['target'].value_counts())

ps2.groupby('target').mean()



from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2)

print(Y.shape, Y_train.shape, Y_test.shape)

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2, stratify = y)

print(Y_train.mean(), Y_test.mean(), y.mean())

print(X_train.mean(), X_test.mean(), X.mean())

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()

classifier.fit(X_train, Y_train)

from sklearn.metrics import accuracy_score
prediction_on_training_data = classifier.predict(X_train)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)
print('Accuracy on training data : ', accuracy_on_training_data)

prediction_on_test_data = classifier.predict(X_test)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)
print('Accuracy on test data : ', accuracy_on_test_data)

input_data =(168,	62,	0,	0,	140,	268,	0,	0,	160,	0,	3.6,	0,	2,	2)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = classifier.predict(input_data_reshaped)
  
print(prediction)

if (prediction[0]==0):
  print('the patient dont have heart disease')
else:
  print('The patient has heart disease')